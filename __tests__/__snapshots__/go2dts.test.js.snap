// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`go2dts bundle.d.ts should match the snapshot 1`] = `
"/** 
 * Generated by go2dts
 *
 * Source: bundle.go
 **/

export interface RegisterBundleRequest {
  name: string
  gitUrl: string
  branch: string
  tenantId: string
  realmId: string
}

export interface PatchBundleRequest {
  name?: string
  gitUrl?: string
  branch?: string
  coverImageURL?: string
  tags: string[]
}

export interface BundleResponse {
  id: UUID
  createdAt: Time
  updatedAt: Time
  syncedAt: Time | null
  deployedAt: Time | null
  deployedSHA: string
  name: string
  gitUrl: string
  gitSHA: string
  branch: string
  config: types.Bundle
  publicKey: string
  coverImageURL: string
  tags: string[]
  tenantId: string
  realmId: string
  activeDeployID: UUID | null
  topContributors: Contributor[]
  description: string
}

export interface BundleListResponse {
  page: PageMeta
  data?: BundleResponse[]
}

export interface DeployResponse {
  bundle: BundleResponse
  functions?: FunctionResponse[]
}

export interface DeployLog {
  id: UUID
  createdAt: Time
  bundleId: UUID
  deployId: UUID
  gitUrl: string
  sha: string
  message: string
  status: string
}

export interface DeployLogResponse {
  page: PageMeta
  data: DeployLog[]
}

export interface ContributorListResponse {
  page: PageMeta
  data?: Contributor[]
}

export interface BundleEditStartResponse {
  url: string
}

export interface BundleSyncResponse {
  sha: string
  branch: string
  gitURL: string
  updated: boolean
}

"
`;

exports[`go2dts editor.d.ts should match the snapshot 1`] = `
"/** 
 * Generated by go2dts
 *
 * Source: editor.go
 **/

export type EditorStageStatus = \\"todo\\" | \\"running\\" | \\"done\\" | \\"failed\\"

export type EditorState = \\"unknown\\" | \\"failed\\" | \\"starting\\" | \\"does not exist\\" | \\"running\\" | \\"stopping\\" | \\"stopped\\" | \\"resuming\\" | \\"destroying\\"

export interface EditorStatus {
  name: string
  realmID: string
  bundleID: string
  createdAt?: Time
  lastActiveAt?: Time
  status: EditorState
  statusMessage: string
  stages: EditorStage[]
  editorURL: string
}

export interface EditorListResponse {
  page: PageMeta
  data?: EditorStatus[]
}

"
`;

exports[`go2dts functions.d.ts should match the snapshot 1`] = `
"/** 
 * Generated by go2dts
 *
 * Source: functions.go
 **/

export interface FunctionResponse {
  id?: UUID
  createdAt: Time
  updatedAt: Time
  bundleId: UUID
  name: string
  image: string
  command: string
  environment: {[key: string]: string}
  secrets: string[]
  schema: any
  deployed: boolean
  deploymentStatus: string
  url: string
}

export interface FunctionInstanceResponse {
  id?: UUID
  createdAt: Time
  updatedAt: Time
  bundleId: UUID
  name: string
  image: string
  command: string
  environment: {[key: string]: string}
  secrets: string[]
  schema: any
  deployed: boolean
  deploymentStatus: string
  url: string
}

export interface FunctionListResponse {
  page: PageMeta
  data?: FunctionResponse[]
}

"
`;

exports[`go2dts jobs.d.ts should match the snapshot 1`] = `
"/** 
 * Generated by go2dts
 *
 * Source: jobs.go
 **/

export type TriggerType = \\"user\\" | \\"apikey\\" | \\"schedule\\" | \\"webhook\\" | \\"unknown\\"

export interface JobResponse {
  id: string
  lastRunAt?: Time
  bundleID: UUID
  url: string
  name: string
  description: string
  notebookPath: string
  schedule: string
  environment: {[key: string]: string}
  secrets: string[]
  success: boolean
  internal: boolean
}

export interface JobListResponse {
  data?: JobResponse[]
}

export interface JobRunRequest {
  environment: {[key: string]: string}
}

export interface JobRunResponse {
  executionID: string
}

export interface JobSpecification {
  schedule: string
  image: string
  command: string[]
  environment: {[key: string]: string}
  secrets: string[]
}

export interface TriggeredBy {
  type: TriggerType
  id: string
  name: string
}

export interface ExecutionResponse {
  id: string
  jobID: string
  bundleID: string
  jobName: string
  startedAt: Time
  completedAt?: Time
  success: boolean
  specification: JobSpecification
  triggeredBy: TriggeredBy
}

export interface ExecutionStatus {
  startedAt: Time
  completedAt?: Time
  success: boolean
}

export interface ExecutionListResponse {
  data?: ExecutionResponse[]
}

export interface LogMessage {
  timestamp: Time
  msg: string
}

export interface LogsResponse {
  status: ExecutionStatus
  data: LogMessage[]
}

"
`;

exports[`go2dts paging.d.ts should match the snapshot 1`] = `
"/** 
 * Generated by go2dts
 *
 * Source: paging.go
 **/

export interface PageMeta {
  next?: number
  prev?: number
  last: number
  count: number
}

"
`;

exports[`go2dts person.d.ts should match the snapshot 1`] = `
"/** 
 * Generated by go2dts
 *
 * Source: person.go
 **/

export interface Contributor {
  name: string
  email: string
  photoURL: string
  rank: number
}

"
`;

exports[`go2dts secrets.d.ts should match the snapshot 1`] = `
"/** 
 * Generated by go2dts
 *
 * Source: secrets.go
 **/

export interface CreateSecretRequest {
  bundleId: UUID
  name: string
  value: string
}

export interface BundleSecretResponse {
  id?: UUID
  createdAt: Time
  bundleId: UUID
  name: string
}

export interface SecretListResponse {
  page: PageMeta
  data: BundleSecretResponse[]
}

"
`;
